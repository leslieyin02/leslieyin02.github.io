<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL企业规范约束</title>
      <link href="/2022/08/30/constraint/"/>
      <url>/2022/08/30/constraint/</url>
      
        <content type="html"><![CDATA[<h2 id="一、库表字段约束规范"><a href="#一、库表字段约束规范" class="headerlink" title="一、库表字段约束规范"></a>一、库表字段约束规范</h2><ol><li><p>如果是判断是否的字段，前缀为is_一定是unsigned tinyint类型，长度为1</p></li><li><p>只要不存在负数的字段，一定是无符号整型</p></li><li><p>数据库，表名，字段名不能出现大写字母，必须是小写字母，下划线后不能只出现数字</p><p> <strong>注：在windows下默认不区分大小写，而在linux下默认区分大小写</strong></p></li><li><p>表名不能是复数，不能以关键字为表名</p></li><li><p>主键索引名以pk_xxx开头，唯一键索引名，以idx_xxx开头，索引名，uk_xxx</p></li><li><p>有小数的禁止使用float，和double，用decimal</p></li><li><p>字符串很小时，使用char定长，varchar是可变长度字符串，一般varchar不超过5000，超过后直接使用文本类型</p></li><li><p>表里必须存在三个字段</p><ul><li>id            必须是unsigned bigint类型，必须设为primary key，如果是单表，和其他表无绑定，必须设为自增</li><li>create_time       必须是datatime类型</li><li>update_time       必须是datetime类型</li></ul></li><li><p>仓库名一般和应用名保持一致</p></li><li><p>字段如果频繁查询，可以允许适当冗余</p></li><li><p>单表超过五百万行或者超过两个G，要分库分表</p></li><li><p>数据类型和宽度的定义要合理</p></li></ol><h2 id="二、索引规范"><a href="#二、索引规范" class="headerlink" title="二、索引规范"></a>二、索引规范</h2><ol><li>一般要给唯一索引</li><li>多表查询，不允许关联查询，内联查询，最多存在两个，并且数据类型要一致</li><li>多表查询时，关联查询的字段也应该有索引</li></ol><h2 id="三、SQL开发约束"><a href="#三、SQL开发约束" class="headerlink" title="三、SQL开发约束"></a>三、SQL开发约束</h2><ol><li><p>count(x,xxx) 不能代替 count(*)，因为 * 可以查询到数据为null的字段</p></li><li><p>当字段是否为null作为where后的查询语句时，一定要用is，如where name is null，判断是否为空的函数 ISNULL()</p></li><li><p>不要使用外键和级联，尤其是在高并发集群项目当中，一切都在应用层解决，不能在SQL语句中</p></li><li><p>实际开发过程中不允许使用存储过程，很难调试</p></li><li><p>更新数据时先要查原数据</p></li><li><p>In操作能避免则避免</p></li><li><p>字符编码必须是UTF8</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Datebase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级部分</title>
      <link href="/2022/08/26/mysql-advance/"/>
      <url>/2022/08/26/mysql-advance/</url>
      
        <content type="html"><![CDATA[<h2 id="一、视图"><a href="#一、视图" class="headerlink" title="一、视图"></a>一、视图</h2><h3 id="1-视图"><a href="#1-视图" class="headerlink" title="1.视图"></a>1.视图</h3><p><strong>作用</strong>：快速查询，隐藏某些信息，保护敏感信息；将一个复杂的查询语句的结果保存，类似于函数，再次查询时只需要查询该视图即可<br><strong>创建</strong>：create view (名字) as (查询语句)，视图查询方法与表相同</p><h3 id="2-显示视图"><a href="#2-显示视图" class="headerlink" title="2.显示视图"></a>2.显示视图</h3><p>desc 视图名：显示视图结构<br>show tables：一般给视图起名时加前缀用于区分表和视图<br>show create view (视图名)；：查看创建视图时的语句<br>select * form 视图名：与表查询方式相同</p><h3 id="3-更新和删除视图"><a href="#3-更新和删除视图" class="headerlink" title="3.更新和删除视图"></a>3.更新和删除视图</h3><p>alter  view （名) as （查询语句）<br>drop view (名)</p><h3 id="4-视图算法"><a href="#4-视图算法" class="headerlink" title="4.视图算法"></a>4.视图算法</h3><p>temptable 临时表算法：如果查询视图时用子查询，结果会有出入，修改视图算法为temptable即可<br>merge：合并算法</p><h2 id="二、事务"><a href="#二、事务" class="headerlink" title="二、事务"></a>二、事务</h2><h3 id="1-事务的提出"><a href="#1-事务的提出" class="headerlink" title="1.事务的提出"></a>1.事务的提出</h3><p><strong>引用自菜鸟教程：MySQL事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务</strong></p><h3 id="2-transaction"><a href="#2-transaction" class="headerlink" title="2.transaction"></a>2.transaction</h3><p>开始事务 <code>start transaction</code></p><p>更新操作 <code>update transaction set balance=balance-10 where id=1;</code></p><p>rollback：在提交以前可回滚</p><p>commit：提交</p><h3 id="3-rollback-to-回滚点"><a href="#3-rollback-to-回滚点" class="headerlink" title="3.rollback to 回滚点"></a>3.rollback to 回滚点</h3><p>设置回滚点：<code>savepoint name</code></p><p>回滚操作：<code>rollback to name</code> 恢复到name之前的数据保存情况</p><h3 id="4-ACID"><a href="#4-ACID" class="headerlink" title="4.ACID"></a>4.ACID</h3><p>atomicity            原子性        事务的所有SQL操作作为原子工作单元执行，要么全部执行，要么全部不执行</p><p>consistency        一致性        事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100</p><p>isolation            隔离性            如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离</p><p>durability            持久性        即事务完成后，对数据库数据的修改被持久化存储</p><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h3><p>事务只能在引擎使用innodb时才能使用</p><h2 id="三、索引"><a href="#三、索引" class="headerlink" title="三、索引"></a>三、索引</h2><p>index：用于实现数据的快速检索</p><p>创建删除的操作方法与表相同</p><h2 id="四、存储过程"><a href="#四、存储过程" class="headerlink" title="四、存储过程"></a>四、存储过程</h2><p>用来模块化设计，可以用来增删改查，用事务，当作函数来理解</p><h3 id="1-delimiter"><a href="#1-delimiter" class="headerlink" title="1.delimiter"></a>1.delimiter</h3><p>设置语句结束符，设计好存储过程后再还原即可</p><h3 id="2-procedure"><a href="#2-procedure" class="headerlink" title="2.procedure"></a>2.procedure</h3><p>创建存储过程：<code>create procedure proc()</code>  </p><p>调用存储过程：<code>call proc()</code></p><h2 id="五、有趣的函数"><a href="#五、有趣的函数" class="headerlink" title="五、有趣的函数"></a>五、有趣的函数</h2><h3 id="1-number"><a href="#1-number" class="headerlink" title="1.number"></a>1.number</h3><p>rand()：生成随机数        ceil()：向上取整        floor()：向下取整         round(数，保留位数)：四舍五入        truncate( 数字, 位数)：截取指定位数</p><p>order by rand()：随机排序</p><h3 id="2-string"><a href="#2-string" class="headerlink" title="2.string"></a>2.string</h3><p>ucase()：小转大        lcase()：大转小        left(‘ ‘,位数)：左截取        right()：右截取        substirng(‘’,起始位置,截取长度)：指定截取</p><p>concat(‘’, ‘’)：将两个字符串合并        可用于查询时设置条件，组合查询：select concat(字段，‘|’，字段) from table</p><h3 id="3-others"><a href="#3-others" class="headerlink" title="3.others"></a>3.others</h3><p>select now()：查看当前时间</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> select year(now()) year, month(now()) month, day(now()) day;+------+-------+------+| year | month | day  |+------+-------+------+| 2022 |     7 |   28 |+------+-------+------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加密函数：</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> select sha('fdsfsd');+------------------------------------------+| sha('fdsfsd')                            |+------------------------------------------+| a3f60445f2031b5cd83534130eeba64cf4a0887b |+------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础部分</title>
      <link href="/2022/08/26/mysql-base/"/>
      <url>/2022/08/26/mysql-base/</url>
      
        <content type="html"><![CDATA[<h2 id="一、开场吹比"><a href="#一、开场吹比" class="headerlink" title="一、开场吹比"></a>一、开场吹比</h2><p>CRUD </p><p>层次模型 网状模型 关系型 </p><p>出现箭头时输入分号回车，表示这行语句结束 创建data文件：mysqld –initialize-insecure –user=root（在文件目录下）</p><h2 id="二、安装连接以及配置"><a href="#二、安装连接以及配置" class="headerlink" title="二、安装连接以及配置"></a>二、安装连接以及配置</h2><h3 id="1-数据库显示和讲解"><a href="#1-数据库显示和讲解" class="headerlink" title="1.数据库显示和讲解"></a>1.数据库显示和讲解</h3><p>net stop/start mysql57 （关闭或启动） </p><p>information_schema：提供对数据库元数据的访问（有关mysql服务器的信息，数据库或表的名称，列的数据类型或访问权限） </p><p>mysql：存储用户信息 </p><p>performance_schema：存储服务运行过程中的状态信息（执行的语句，花费的时间，占用的内存） sys：存储系统文件</p><h3 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2.创建数据库"></a>2.创建数据库</h3><p>create database student</p><p>检查是否存在数据库，若不存在则创建数据库（反之不创建，但通过命令）：create database if not exists student</p><h3 id="3-删除数据库："><a href="#3-删除数据库：" class="headerlink" title="3.删除数据库："></a>3.删除数据库：</h3><p>drop database student</p><p>检查是否存在数据库，若存在则删除数据库（反之不删除，但通过命令）：drop database if exists student </p><p>共同点：强制 创建 / 删除 关键字命名的数据库：加反引号 </p><h3 id="4-查看创建数据库的SQL"><a href="#4-查看创建数据库的SQL" class="headerlink" title="4.查看创建数据库的SQL"></a>4.查看创建数据库的SQL</h3><p>show create database student</p><h3 id="5-创建数据库指定字符编码"><a href="#5-创建数据库指定字符编码" class="headerlink" title="5.创建数据库指定字符编码"></a>5.创建数据库指定字符编码</h3><p>create database student charset=gbk </p><p>查看字符编码时与查看SQL相同，show create database student </p><p>关于字符编码，常用的两种：GBK（中国标准）， UTF-8，windows系统下用GBK（实际开发中一定用UTF-8），Mac或linux系统下用UTF-8</p><h3 id="6-修改数据库字符编码"><a href="#6-修改数据库字符编码" class="headerlink" title="6.修改数据库字符编码"></a>6.修改数据库字符编码</h3><p>alter database student charset=gbk/utf8</p><h2 id="三、表的基本操作"><a href="#三、表的基本操作" class="headerlink" title="三、表的基本操作"></a>三、表的基本操作</h2><h3 id="1-引用数据库和查看数据库中的表"><a href="#1-引用数据库和查看数据库中的表" class="headerlink" title="1.引用数据库和查看数据库中的表"></a>1.引用数据库和查看数据库中的表</h3><p>user leslie_school </p><p>show tables </p><h3 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2.创建表"></a>2.创建表</h3><p>create table student(换行) id name age：称为字段 逼格创建表： create table if not exists lesle( id int     auto_increment primary key comment ‘主键id’, name varchar(30) not     null comment ‘老师姓名’, phone varchar(20)     comment ‘电话号码’, address varchar(100) default ‘暂时未知’ comment ‘住址’ )engine=innodb</p><p>auto_increment：自动增长且无重复，primary key：(主要的：用于区分，基本的：不能为空)，not null：不能为空，default：设置默认值，engine=innodb：最常用、效率最高的mysql引擎 show create table student：可以查看当时创建表使用的语句 </p><p><strong>注：</strong>必须将该数据库的字符编码格式改为GBK才能在创建表时使用 default ‘ ‘ 指定默认值的语句 创建以关键字命名的表同样需要加反引号才能成功创建</p><h3 id="3-查看表结构"><a href="#3-查看表结构" class="headerlink" title="3.查看表结构"></a>3.查看表结构</h3><p>desc student：以表格的形式显示</p><h3 id="4-删除表-多张表："><a href="#4-删除表-多张表：" class="headerlink" title="4.删除表 / 多张表："></a>4.删除表 / 多张表：</h3><p>drop table if exists a, b, c</p><h3 id="5-修改表"><a href="#5-修改表" class="headerlink" title="5.修改表"></a>5.修改表</h3><p>表中一行行数据称为记录实际上是修改表的结构 </p><p>增加记录 / 到指定位置： alter table teacher add gender int(12) after （指定位置）/ first（第一行）</p><h3 id="6-删除记录"><a href="#6-删除记录" class="headerlink" title="6.删除记录"></a>6.删除记录</h3><p>alter table teacher drop     gender </p><p>改字段名字和数据类型 / 只改数据类型：alter table teacher     change id（原名）+ 要改的名字 + 类型modify id（原名）+ 新数据类型 </p><h3 id="7-改表名"><a href="#7-改表名" class="headerlink" title="7.改表名"></a>7.改表名</h3><p>alter table +（原表名）+ rename to + 新名字 三级递增查看：show databases（所有数据库） ——&gt; show tables （所有表）——&gt; desc teacher（单个表）</p><h2 id="四、数据操作"><a href="#四、数据操作" class="headerlink" title="四、数据操作"></a>四、数据操作</h2><h3 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1.插入数据"></a>1.插入数据</h3><p>insert into teacher     values() 亦可以在前面加入格式，只要一一对应即可 插入多行数据时，只需在，后面加括号按原格式写入即可 </p><p><strong>注：</strong>自动增长的数据写入null会自增，默认的数据写入default会自动填入创建时指定的数据，非空的数据不能填入null</p><h3 id="2-字符编码集问题"><a href="#2-字符编码集问题" class="headerlink" title="2.字符编码集问题"></a>2.字符编码集问题</h3><p>client 和 result都是gbk（用于练习）set character_set_%=gbk</p><h3 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3.删除数据"></a>3.删除数据</h3><p>delete from teacher(表名) + where + 条件（如id&gt;4, name=Tom等等）</p><h3 id="4-清空表"><a href="#4-清空表" class="headerlink" title="4.清空表"></a>4.清空表</h3><p>truncate table + 表名delete from teacher（表名）（一般不用，底层实现太慢） 用truncate删除再写入新数据时从头开始，用delete删除再插入从原来的数据后面开始</p><h3 id="5-更新数据"><a href="#5-更新数据" class="headerlink" title="5.更新数据"></a>5.更新数据</h3><p>update + 表名 + set + 修改的内容 + where + 条件（可用or连接，如果两个条件都满足则都执行）</p><h3 id="6-查询表数据"><a href="#6-查询表数据" class="headerlink" title="6.查询表数据"></a>6.查询表数据</h3><p>select + （条件，如id, name,*全部）from + 表名</p><h3 id="7-SQL语句区分"><a href="#7-SQL语句区分" class="headerlink" title="7.SQL语句区分"></a>7.SQL语句区分</h3><p>DDL data definition language    数据库定义语言：  create alter drop show </p><p>DML data manipulation language    数据操纵语言： insert update delete select     </p><h2 id="五、数据类型"><a href="#五、数据类型" class="headerlink" title="五、数据类型"></a>五、数据类型</h2><h3 id="1-数据库的数据类型问题"><a href="#1-数据库的数据类型问题" class="headerlink" title="1.数据库的数据类型问题"></a>1.数据库的数据类型问题</h3><p>没有统一标准，但要符合业务项目的逻辑标准</p><h3 id="2-int-类型"><a href="#2-int-类型" class="headerlink" title="2.int 类型"></a>2.int 类型</h3><p>unsigned：无符号正整数类型，范围是左右相加 插入数据时可以超过定义宽度但不能超过原数据类型最大限度</p><h3 id="3-浮点数"><a href="#3-浮点数" class="headerlink" title="3.浮点数"></a>3.浮点数</h3><p>float, double：超过小数位的位数就会四舍五入位数过长会数据丢失</p><h3 id="4-定点数"><a href="#4-定点数" class="headerlink" title="4.定点数"></a>4.定点数</h3><p>decimal（支持无符号，整数小数分开存）</p><h3 id="5-字符串与文本类型"><a href="#5-字符串与文本类型" class="headerlink" title="5.字符串与文本类型"></a>5.字符串与文本类型</h3><p>char：实际上是字符串类型，一般用varchar，可回收剩余空间，但效率不如char高 6.布尔类型：true(1), false(0)</p><h3 id="6-枚举类型"><a href="#6-枚举类型" class="headerlink" title="6.枚举类型"></a>6.枚举类型</h3><p>enum() 只能取给定的类型中的内容插入时可以用数字，枚举类型存储也是用数字，节省空间，限制数据，速度快</p><h3 id="7-set类型"><a href="#7-set类型" class="headerlink" title="7.set类型"></a>7.set类型</h3><p>set(‘ ‘, ‘ ‘) 插入时可以选多个内容，但必须在一段’ ‘内（存储方式为2的次方）</p><h3 id="8-时间日期类型"><a href="#8-时间日期类型" class="headerlink" title="8.时间日期类型"></a>8.时间日期类型</h3><p>datetime（常用格式） 按格式插入即可</p><h2 id="六、列属性完整性"><a href="#六、列属性完整性" class="headerlink" title="六、列属性完整性"></a>六、列属性完整性</h2><h3 id="1-列属性问题"><a href="#1-列属性问题" class="headerlink" title="1.列属性问题"></a>1.列属性问题</h3><p>自增的数据删除后无法再使用删除过的自增数字</p><h3 id="2-Primary-Key"><a href="#2-Primary-Key" class="headerlink" title="2.Primary Key"></a>2.Primary Key</h3><p>唯一不重复，关键特征，查询速度快，与其他表可能有关联，不能为空</p><h3 id="3-增加主键"><a href="#3-增加主键" class="headerlink" title="3.增加主键"></a>3.增加主键</h3><p>alter table + 表名 + add + primary key （1， 2）可以增加多个（）组合（复合键）主键 删除主键，alter table + 表名 + drop primary key 选择主键时一般只要一个，并且是具有代表性易于区分，易于查询（一般是数字）</p><h3 id="4-unique"><a href="#4-unique" class="headerlink" title="4.unique"></a>4.unique</h3><p>唯一键，与其他表无关联，不能重复，可以为空，可存在多个，可以通过alter添加，添加时用add unique +（字段名），删除唯一键用drop index + 字段名</p><h3 id="5-数据库完整性"><a href="#5-数据库完整性" class="headerlink" title="5.数据库完整性"></a>5.数据库完整性</h3><p>有一个主键，数据类型要选对，为不为空，默认值，添加约束，别的表可能会用</p><h3 id="6-外键"><a href="#6-外键" class="headerlink" title="6.外键"></a>6.外键</h3><p>foreign key （并发项目禁止使用外键） 创建表时添加：foreign key (子表-&gt;stuId) references     stu(父表)(stuId) 后期可以用alter修改，用add添加即可 一般都是在创建时就设计好</p><h3 id="7-删除外键"><a href="#7-删除外键" class="headerlink" title="7.删除外键"></a>7.删除外键</h3><p>先用show table 查看，然后用alter table + 表名 + drop priamry key + (外键别名) MUL：表示该列的值可重复</p><h3 id="8-置空操作"><a href="#8-置空操作" class="headerlink" title="8.置空操作"></a>8.置空操作</h3><p>置空：将外键关联的从表中的字段置空为NULL，数据还存在 </p><p>级联：从表与主表一起更新数据，（彻底删除）主表中的数据删除，与它绑定外键的数据全部删除 删除时一般不使用级联，一般用置空操作</p><h3 id="9-置空和级联演示"><a href="#9-置空和级联演示" class="headerlink" title="9.置空和级联演示"></a>9.置空和级联演示</h3><p>创建时 on delete set null on     update cascade 级联：update stu set stuId=’4’     where name=’frank’（将主表中id改为4），从表中与stuId级联的数据也变为4 </p><p>置空：delete from stu where     stuId=’2’，从表中stuId=2的字段置空为NULL，但该字段对应的数据保留</p><h2 id="七、数据库设计思维"><a href="#七、数据库设计思维" class="headerlink" title="七、数据库设计思维"></a>七、数据库设计思维</h2><p> Codd第一范式，确保每列字段的原子性 </p><p>第二范式，每个表必须有主关键字（Primary key），其他数据元素与主关键字一一对应 </p><p>第三范式，消除传递依赖，数据元素之间相互独立</p><h2 id="八、单表查询"><a href="#八、单表查询" class="headerlink" title="八、单表查询"></a>八、单表查询</h2><h3 id="1-select"><a href="#1-select" class="headerlink" title="1.select"></a>1.select</h3><p>随意查询，可作计算，加as可以起别名 from：select * from 表1， 表2返回两张表的笛卡尔积 </p><h3 id="2-dual"><a href="#2-dual" class="headerlink" title="2.dual"></a>2.dual</h3><p>伪表，from dual，可以省略 where：后面可以接各种各样的条件 in：where 字段 in（‘ ’，‘ ’），和or同理 between and ：where + 字段 + between .. and .. </p><h3 id="3-聚合函数"><a href="#3-聚合函数" class="headerlink" title="3.聚合函数"></a>3.聚合函数</h3><p>select 函数名（条件）from 表名 </p><p>常见函数：sum,max,min,count,avg </p><h3 id="4-使用客户端图像界面"><a href="#4-使用客户端图像界面" class="headerlink" title="4.使用客户端图像界面"></a>4.使用客户端图像界面</h3><p>Navicat，破解工具直接搜 </p><h3 id="5-模糊查询"><a href="#5-模糊查询" class="headerlink" title="5.模糊查询"></a>5.模糊查询</h3><p>where name like ‘张%’ 配合通配符使用，%代表多个字符，_ 代表一个字符</p><h3 id="6-分组查询"><a href="#6-分组查询" class="headerlink" title="6.分组查询"></a>6.分组查询</h3><p>select avg(age) as ‘年龄’,address as ‘地区’ from info group by address </p><p>group by使用条件：有聚合函数，有分组的字段 group_concat(字段名)，可将符合条件的分组聚合 select group_concat(address),gender from info group by gender </p><h3 id="7-having"><a href="#7-having" class="headerlink" title="7.having"></a>7.having</h3><p>在已经查询到的虚拟表中利用条件再次查询，后面跟的条件名与别名相同 limit 1, 2：1，起始位置，2，长度</p><h3 id="8-distinct"><a href="#8-distinct" class="headerlink" title="8..distinct"></a>8..distinct</h3><p>去重，后跟字段名，可以配合count函数查询去重后的数据个数count（distinct 字段名）</p><h2 id="九、多表查询"><a href="#九、多表查询" class="headerlink" title="九、多表查询"></a>九、多表查询</h2><h3 id="1-union"><a href="#1-union" class="headerlink" title="1.union"></a>1.union</h3><p>查询的两张表字段名相同，连接两句查询语句，union后可跟distinct去重 distinct：去重，去掉重复值，多个相同的值只显示一次</p><h3 id="2-inner-join（内连接）"><a href="#2-inner-join（内连接）" class="headerlink" title="2.inner join（内连接）"></a>2.inner join（内连接）</h3><p>将两张表连接，select （查询的字段）from t1 inner join t2 on (两张表的公共字段作连接) t1.id=t2.stuId、 多张表后再加inner join</p><h3 id="3-left-join"><a href="#3-left-join" class="headerlink" title="3.left join"></a>3.left join</h3><p>以左表为基准（将左表提到的数据全部显示，数据为空的显示为NULL）</p><h3 id="4-right-join"><a href="#4-right-join" class="headerlink" title="4.right join"></a>4.right join</h3><p>以右表为基准</p><h3 id="5-cross-join"><a href="#5-cross-join" class="headerlink" title="5.cross join"></a>5.cross join</h3><p>返回笛卡尔积</p><h3 id="6-natural-join"><a href="#6-natural-join" class="headerlink" title="6.natural join"></a>6.natural join</h3><p>自然连接，将两张有相同的字段名的表连接，显示两张表的其他剩余所有数据，中间可以加left right 自然左连接和自然右连接 如果没有相同字段名，则返回笛卡尔积</p><h3 id="7-using"><a href="#7-using" class="headerlink" title="7.using"></a>7.using</h3><p>当多表查询时出现多个相同字段但要进行连接时，用using(字段名)，使用该字段名连接</p><p>一般都将字段名写全，不使用using</p><h2 id="十、子查询"><a href="#十、子查询" class="headerlink" title="十、子查询"></a>十、子查询</h2><h3 id="1-嵌套查询"><a href="#1-嵌套查询" class="headerlink" title="1.嵌套查询"></a>1.嵌套查询</h3><p>一个查询语句中嵌套另一个查询语句，将返回值作为where后的条件，用in连接，还有not in，in的反面</p><h3 id="2-exists-和-not-exists"><a href="#2-exists-和-not-exists" class="headerlink" title="2.exists 和 not exists"></a>2.exists 和 not exists</h3><p>父语句 where exists (子语句)子语句只要满足某一条件，父语句就执行</p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
