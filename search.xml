<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL基础部分</title>
      <link href="/2022/08/26/mysql-base/"/>
      <url>/2022/08/26/mysql-base/</url>
      
        <content type="html"><![CDATA[<h2 id="一、开场吹比"><a href="#一、开场吹比" class="headerlink" title="一、开场吹比"></a>一、开场吹比</h2><p>CRUD </p><p>层次模型 网状模型 关系型 </p><p>出现箭头时输入分号回车，表示这行语句结束 创建data文件：mysqld –initialize-insecure –user=root（在文件目录下）</p><h2 id="二、安装连接以及配置"><a href="#二、安装连接以及配置" class="headerlink" title="二、安装连接以及配置"></a>二、安装连接以及配置</h2><h3 id="1-数据库显示和讲解"><a href="#1-数据库显示和讲解" class="headerlink" title="1.数据库显示和讲解"></a>1.数据库显示和讲解</h3><p>net stop/start mysql57 （关闭或启动） </p><p>information_schema：提供对数据库元数据的访问（有关mysql服务器的信息，数据库或表的名称，列的数据类型或访问权限） </p><p>mysql：存储用户信息 </p><p>performance_schema：存储服务运行过程中的状态信息（执行的语句，花费的时间，占用的内存） sys：存储系统文件</p><h3 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2.创建数据库"></a>2.创建数据库</h3><p>create database student</p><p>检查是否存在数据库，若不存在则创建数据库（反之不创建，但通过命令）：create database if not exists student</p><h3 id="3-删除数据库："><a href="#3-删除数据库：" class="headerlink" title="3.删除数据库："></a>3.删除数据库：</h3><p>drop database student</p><p>检查是否存在数据库，若存在则删除数据库（反之不删除，但通过命令）：drop database if exists student </p><p>共同点：强制 创建 / 删除 关键字命名的数据库：加反引号 </p><h3 id="4-查看创建数据库的SQL"><a href="#4-查看创建数据库的SQL" class="headerlink" title="4.查看创建数据库的SQL"></a>4.查看创建数据库的SQL</h3><p>show create database student</p><h3 id="5-创建数据库指定字符编码"><a href="#5-创建数据库指定字符编码" class="headerlink" title="5.创建数据库指定字符编码"></a>5.创建数据库指定字符编码</h3><p>create database student charset=gbk </p><p>查看字符编码时与查看SQL相同，show create database student </p><p>关于字符编码，常用的两种：GBK（中国标准）， UTF-8，windows系统下用GBK（实际开发中一定用UTF-8），Mac或linux系统下用UTF-8</p><h3 id="6-修改数据库字符编码"><a href="#6-修改数据库字符编码" class="headerlink" title="6.修改数据库字符编码"></a>6.修改数据库字符编码</h3><p>alter database student charset=gbk/utf8</p><h2 id="三、表的基本操作"><a href="#三、表的基本操作" class="headerlink" title="三、表的基本操作"></a>三、表的基本操作</h2><h3 id="1-引用数据库和查看数据库中的表"><a href="#1-引用数据库和查看数据库中的表" class="headerlink" title="1.引用数据库和查看数据库中的表"></a>1.引用数据库和查看数据库中的表</h3><p>user leslie_school </p><p>show tables </p><h3 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2.创建表"></a>2.创建表</h3><p>create table student(换行) id name age：称为字段 逼格创建表： create table if not exists lesle( id int     auto_increment primary key comment ‘主键id’, name varchar(30) not     null comment ‘老师姓名’, phone varchar(20)     comment ‘电话号码’, address varchar(100) default ‘暂时未知’ comment ‘住址’ )engine=innodb</p><p>auto_increment：自动增长且无重复，primary key：(主要的：用于区分，基本的：不能为空)，not null：不能为空，default：设置默认值，engine=innodb：最常用、效率最高的mysql引擎 show create table student：可以查看当时创建表使用的语句 </p><p><strong>注：</strong>必须将该数据库的字符编码格式改为GBK才能在创建表时使用 default ‘ ‘ 指定默认值的语句 创建以关键字命名的表同样需要加反引号才能成功创建</p><h3 id="3-查看表结构"><a href="#3-查看表结构" class="headerlink" title="3.查看表结构"></a>3.查看表结构</h3><p>desc student：以表格的形式显示</p><h3 id="4-删除表-多张表："><a href="#4-删除表-多张表：" class="headerlink" title="4.删除表 / 多张表："></a>4.删除表 / 多张表：</h3><p>drop table if exists a, b, c</p><h3 id="5-修改表"><a href="#5-修改表" class="headerlink" title="5.修改表"></a>5.修改表</h3><p>表中一行行数据称为记录实际上是修改表的结构 </p><p>增加记录 / 到指定位置： alter table teacher add gender int(12) after （指定位置）/ first（第一行）</p><h3 id="6-删除记录"><a href="#6-删除记录" class="headerlink" title="6.删除记录"></a>6.删除记录</h3><p>alter table teacher drop     gender </p><p>改字段名字和数据类型 / 只改数据类型：alter table teacher     change id（原名）+ 要改的名字 + 类型modify id（原名）+ 新数据类型 </p><h3 id="7-改表名"><a href="#7-改表名" class="headerlink" title="7.改表名"></a>7.改表名</h3><p>alter table +（原表名）+ rename to + 新名字 三级递增查看：show databases（所有数据库） ——&gt; show tables （所有表）——&gt; desc teacher（单个表）</p><h2 id="四、数据操作"><a href="#四、数据操作" class="headerlink" title="四、数据操作"></a>四、数据操作</h2><h3 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1.插入数据"></a>1.插入数据</h3><p>insert into teacher     values() 亦可以在前面加入格式，只要一一对应即可 插入多行数据时，只需在，后面加括号按原格式写入即可 </p><p><strong>注：</strong>自动增长的数据写入null会自增，默认的数据写入default会自动填入创建时指定的数据，非空的数据不能填入null</p><h3 id="2-字符编码集问题"><a href="#2-字符编码集问题" class="headerlink" title="2.字符编码集问题"></a>2.字符编码集问题</h3><p>client 和 result都是gbk（用于练习）set character_set_%=gbk</p><h3 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3.删除数据"></a>3.删除数据</h3><p>delete from teacher(表名) + where + 条件（如id&gt;4, name=Tom等等）</p><h3 id="4-清空表"><a href="#4-清空表" class="headerlink" title="4.清空表"></a>4.清空表</h3><p>truncate table + 表名delete from teacher（表名）（一般不用，底层实现太慢） 用truncate删除再写入新数据时从头开始，用delete删除再插入从原来的数据后面开始</p><h3 id="5-更新数据"><a href="#5-更新数据" class="headerlink" title="5.更新数据"></a>5.更新数据</h3><p>update + 表名 + set + 修改的内容 + where + 条件（可用or连接，如果两个条件都满足则都执行）</p><h3 id="6-查询表数据"><a href="#6-查询表数据" class="headerlink" title="6.查询表数据"></a>6.查询表数据</h3><p>select + （条件，如id, name,*全部）from + 表名</p><h3 id="7-SQL语句区分"><a href="#7-SQL语句区分" class="headerlink" title="7.SQL语句区分"></a>7.SQL语句区分</h3><p>DDL data definition language    数据库定义语言：  create alter drop show </p><p>DML data manipulation language    数据操纵语言： insert update delete select     </p><h2 id="五、数据类型"><a href="#五、数据类型" class="headerlink" title="五、数据类型"></a>五、数据类型</h2><h3 id="1-数据库的数据类型问题"><a href="#1-数据库的数据类型问题" class="headerlink" title="1.数据库的数据类型问题"></a>1.数据库的数据类型问题</h3><p>没有统一标准，但要符合业务项目的逻辑标准</p><h3 id="2-int-类型"><a href="#2-int-类型" class="headerlink" title="2.int 类型"></a>2.int 类型</h3><p>unsigned：无符号正整数类型，范围是左右相加 插入数据时可以超过定义宽度但不能超过原数据类型最大限度</p><h3 id="3-浮点数"><a href="#3-浮点数" class="headerlink" title="3.浮点数"></a>3.浮点数</h3><p>float, double：超过小数位的位数就会四舍五入位数过长会数据丢失</p><h3 id="4-定点数"><a href="#4-定点数" class="headerlink" title="4.定点数"></a>4.定点数</h3><p>decimal（支持无符号，整数小数分开存）</p><h3 id="5-字符串与文本类型"><a href="#5-字符串与文本类型" class="headerlink" title="5.字符串与文本类型"></a>5.字符串与文本类型</h3><p>char：实际上是字符串类型，一般用varchar，可回收剩余空间，但效率不如char高 6.布尔类型：true(1), false(0)</p><h3 id="6-枚举类型"><a href="#6-枚举类型" class="headerlink" title="6.枚举类型"></a>6.枚举类型</h3><p>enum() 只能取给定的类型中的内容插入时可以用数字，枚举类型存储也是用数字，节省空间，限制数据，速度快</p><h3 id="7-set类型"><a href="#7-set类型" class="headerlink" title="7.set类型"></a>7.set类型</h3><p>set(‘ ‘, ‘ ‘) 插入时可以选多个内容，但必须在一段’ ‘内（存储方式为2的次方）</p><h3 id="8-时间日期类型"><a href="#8-时间日期类型" class="headerlink" title="8.时间日期类型"></a>8.时间日期类型</h3><p>datetime（常用格式） 按格式插入即可</p><h2 id="六、列属性完整性"><a href="#六、列属性完整性" class="headerlink" title="六、列属性完整性"></a>六、列属性完整性</h2><h3 id="1-列属性问题"><a href="#1-列属性问题" class="headerlink" title="1.列属性问题"></a>1.列属性问题</h3><p>自增的数据删除后无法再使用删除过的自增数字</p><h3 id="2-Primary-Key"><a href="#2-Primary-Key" class="headerlink" title="2.Primary Key"></a>2.Primary Key</h3><p>唯一不重复，关键特征，查询速度快，与其他表可能有关联，不能为空</p><h3 id="3-增加主键"><a href="#3-增加主键" class="headerlink" title="3.增加主键"></a>3.增加主键</h3><p>alter table + 表名 + add + primary key （1， 2）可以增加多个（）组合（复合键）主键 删除主键，alter table + 表名 + drop primary key 选择主键时一般只要一个，并且是具有代表性易于区分，易于查询（一般是数字）</p><h3 id="4-unique"><a href="#4-unique" class="headerlink" title="4.unique"></a>4.unique</h3><p>唯一键，与其他表无关联，不能重复，可以为空，可存在多个，可以通过alter添加，添加时用add unique +（字段名），删除唯一键用drop index + 字段名</p><h3 id="5-数据库完整性"><a href="#5-数据库完整性" class="headerlink" title="5.数据库完整性"></a>5.数据库完整性</h3><p>有一个主键，数据类型要选对，为不为空，默认值，添加约束，别的表可能会用</p><h3 id="6-外键"><a href="#6-外键" class="headerlink" title="6.外键"></a>6.外键</h3><p>foreign key （并发项目禁止使用外键） 创建表时添加：foreign key (子表-&gt;stuId) references     stu(父表)(stuId) 后期可以用alter修改，用add添加即可 一般都是在创建时就设计好</p><h3 id="7-删除外键"><a href="#7-删除外键" class="headerlink" title="7.删除外键"></a>7.删除外键</h3><p>先用show table 查看，然后用alter table + 表名 + drop priamry key + (外键别名) MUL：表示该列的值可重复</p><h3 id="8-置空操作"><a href="#8-置空操作" class="headerlink" title="8.置空操作"></a>8.置空操作</h3><p>置空：将外键关联的从表中的字段置空为NULL，数据还存在 </p><p>级联：从表与主表一起更新数据，（彻底删除）主表中的数据删除，与它绑定外键的数据全部删除 删除时一般不使用级联，一般用置空操作</p><h3 id="9-置空和级联演示"><a href="#9-置空和级联演示" class="headerlink" title="9.置空和级联演示"></a>9.置空和级联演示</h3><p>创建时 on delete set null on     update cascade 级联：update stu set stuId=’4’     where name=’frank’（将主表中id改为4），从表中与stuId级联的数据也变为4 </p><p>置空：delete from stu where     stuId=’2’，从表中stuId=2的字段置空为NULL，但该字段对应的数据保留</p><h2 id="七、数据库设计思维"><a href="#七、数据库设计思维" class="headerlink" title="七、数据库设计思维"></a>七、数据库设计思维</h2><p> Codd第一范式，确保每列字段的原子性 </p><p>第二范式，每个表必须有主关键字（Primary key），其他数据元素与主关键字一一对应 </p><p>第三范式，消除传递依赖，数据元素之间相互独立</p><h2 id="八、单表查询"><a href="#八、单表查询" class="headerlink" title="八、单表查询"></a>八、单表查询</h2><h3 id="1-select"><a href="#1-select" class="headerlink" title="1.select"></a>1.select</h3><p>随意查询，可作计算，加as可以起别名 from：select * from 表1， 表2返回两张表的笛卡尔积 </p><h3 id="2-dual"><a href="#2-dual" class="headerlink" title="2.dual"></a>2.dual</h3><p>伪表，from dual，可以省略 where：后面可以接各种各样的条件 in：where 字段 in（‘ ’，‘ ’），和or同理 between and ：where + 字段 + between .. and .. </p><h3 id="3-聚合函数"><a href="#3-聚合函数" class="headerlink" title="3.聚合函数"></a>3.聚合函数</h3><p>select 函数名（条件）from 表名 </p><p>常见函数：sum,max,min,count,avg </p><h3 id="4-使用客户端图像界面"><a href="#4-使用客户端图像界面" class="headerlink" title="4.使用客户端图像界面"></a>4.使用客户端图像界面</h3><p>Navicat，破解工具直接搜 </p><h3 id="5-模糊查询"><a href="#5-模糊查询" class="headerlink" title="5.模糊查询"></a>5.模糊查询</h3><p>where name like ‘张%’ 配合通配符使用，%代表多个字符，_ 代表一个字符</p><h3 id="6-分组查询"><a href="#6-分组查询" class="headerlink" title="6.分组查询"></a>6.分组查询</h3><p>select avg(age) as ‘年龄’,address as ‘地区’ from info group by address </p><p>group by使用条件：有聚合函数，有分组的字段 group_concat(字段名)，可将符合条件的分组聚合 select group_concat(address),gender from info group by gender </p><h3 id="7-having"><a href="#7-having" class="headerlink" title="7.having"></a>7.having</h3><p>在已经查询到的虚拟表中利用条件再次查询，后面跟的条件名与别名相同 limit 1, 2：1，起始位置，2，长度</p><h3 id="8-distinct"><a href="#8-distinct" class="headerlink" title="8..distinct"></a>8..distinct</h3><p>去重，后跟字段名，可以配合count函数查询去重后的数据个数count（distinct 字段名）</p><h2 id="九、多表查询"><a href="#九、多表查询" class="headerlink" title="九、多表查询"></a>九、多表查询</h2><h3 id="1-union"><a href="#1-union" class="headerlink" title="1.union"></a>1.union</h3><p>查询的两张表字段名相同，连接两句查询语句，union后可跟distinct去重 distinct：去重，去掉重复值，多个相同的值只显示一次</p><h3 id="2-inner-join（内连接）"><a href="#2-inner-join（内连接）" class="headerlink" title="2.inner join（内连接）"></a>2.inner join（内连接）</h3><p>将两张表连接，select （查询的字段）from t1 inner join t2 on (两张表的公共字段作连接) t1.id=t2.stuId、 多张表后再加inner join</p><h3 id="3-left-join"><a href="#3-left-join" class="headerlink" title="3.left join"></a>3.left join</h3><p>以左表为基准（将左表提到的数据全部显示，数据为空的显示为NULL）</p><h3 id="4-right-join"><a href="#4-right-join" class="headerlink" title="4.right join"></a>4.right join</h3><p>以右表为基准</p><h3 id="5-cross-join"><a href="#5-cross-join" class="headerlink" title="5.cross join"></a>5.cross join</h3><p>返回笛卡尔积</p><h3 id="6-natural-join"><a href="#6-natural-join" class="headerlink" title="6.natural join"></a>6.natural join</h3><p>自然连接，将两张有相同的字段名的表连接，显示两张表的其他剩余所有数据，中间可以加left right 自然左连接和自然右连接 如果没有相同字段名，则返回笛卡尔积</p><h3 id="7-using"><a href="#7-using" class="headerlink" title="7.using"></a>7.using</h3><p>当多表查询时出现多个相同字段但要进行连接时，用using(字段名)，使用该字段名连接</p><p>一般都将字段名写全，不使用using</p><h2 id="十、子查询"><a href="#十、子查询" class="headerlink" title="十、子查询"></a>十、子查询</h2><h3 id="1-嵌套查询"><a href="#1-嵌套查询" class="headerlink" title="1.嵌套查询"></a>1.嵌套查询</h3><p>一个查询语句中嵌套另一个查询语句，将返回值作为where后的条件，用in连接，还有not in，in的反面</p><h3 id="2-exists-和-not-exists"><a href="#2-exists-和-not-exists" class="headerlink" title="2.exists 和 not exists"></a>2.exists 和 not exists</h3><p>父语句 where exists (子语句)子语句只要满足某一条件，父语句就执行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级部分</title>
      <link href="/2022/08/26/mysql-advance/"/>
      <url>/2022/08/26/mysql-advance/</url>
      
        <content type="html"><![CDATA[<h2 id="一、视图"><a href="#一、视图" class="headerlink" title="一、视图"></a>一、视图</h2><h3 id="1-视图"><a href="#1-视图" class="headerlink" title="1.视图"></a>1.视图</h3><p><strong>作用</strong>：快速查询，隐藏某些信息，保护敏感信息；将一个复杂的查询语句的结果保存，类似于函数，再次查询时只需要查询该视图即可<br><strong>创建</strong>：create view (名字) as (查询语句)，视图查询方法与表相同</p><h3 id="2-显示视图"><a href="#2-显示视图" class="headerlink" title="2.显示视图"></a>2.显示视图</h3><p>desc 视图名：显示视图结构<br>show tables：一般给视图起名时加前缀用于区分表和视图<br>show create view (视图名)；：查看创建视图时的语句<br>select * form 视图名：与表查询方式相同</p><h3 id="3-更新和删除视图"><a href="#3-更新和删除视图" class="headerlink" title="3.更新和删除视图"></a>3.更新和删除视图</h3><p>alter  view （名) as （查询语句）<br>drop view (名)</p><h3 id="4-视图算法"><a href="#4-视图算法" class="headerlink" title="4.视图算法"></a>4.视图算法</h3><p>temptable 临时表算法：如果查询视图时用子查询，结果会有出入，修改视图算法为temptable即可<br>merge：合并算法</p><h2 id="二、事务"><a href="#二、事务" class="headerlink" title="二、事务"></a>二、事务</h2><h3 id="1-事务的提出"><a href="#1-事务的提出" class="headerlink" title="1.事务的提出"></a>1.事务的提出</h3><p><strong>引用自菜鸟教程：MySQL事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务</strong></p><h3 id="2-transaction"><a href="#2-transaction" class="headerlink" title="2.transaction"></a>2.transaction</h3><p>开始事务 <code>start transaction</code></p><p>更新操作 <code>update transaction set balance=balance-10 where id=1;</code></p><p>rollback：在提交以前可回滚</p><p>commit：提交</p><h3 id="3-rollback-to-回滚点"><a href="#3-rollback-to-回滚点" class="headerlink" title="3.rollback to 回滚点"></a>3.rollback to 回滚点</h3><p>设置回滚点：<code>savepoint name</code></p><p>回滚操作：<code>rollback to name</code> 恢复到name之前的数据保存情况</p><h3 id="4-ACID"><a href="#4-ACID" class="headerlink" title="4.ACID"></a>4.ACID</h3><p>atomicity            原子性        事务的所有SQL操作作为原子工作单元执行，要么全部执行，要么全部不执行</p><p>consistency        一致性        事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100</p><p>isolation            隔离性            如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离</p><p>durability            持久性        即事务完成后，对数据库数据的修改被持久化存储</p><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h3><p>事务只能在引擎使用innodb时才能使用</p><h2 id="三、索引"><a href="#三、索引" class="headerlink" title="三、索引"></a>三、索引</h2><p>index：用于实现数据的快速检索</p><p>创建删除的操作方法与表相同</p><h2 id="四、存储过程"><a href="#四、存储过程" class="headerlink" title="四、存储过程"></a>四、存储过程</h2><p>用来模块化设计，可以用来增删改查，用事务，当作函数来理解</p><h3 id="1-delimiter"><a href="#1-delimiter" class="headerlink" title="1.delimiter"></a>1.delimiter</h3><p>设置语句结束符，设计好存储过程后再还原即可</p><h3 id="2-procedure"><a href="#2-procedure" class="headerlink" title="2.procedure"></a>2.procedure</h3><p>创建存储过程：<code>create procedure proc()</code>  </p><p>调用存储过程：<code>call proc()</code></p><h2 id="五、有趣的函数"><a href="#五、有趣的函数" class="headerlink" title="五、有趣的函数"></a>五、有趣的函数</h2><h3 id="1-number"><a href="#1-number" class="headerlink" title="1.number"></a>1.number</h3><p>rand()：生成随机数        ceil()：向上取整        floor()：向下取整         round(数，保留位数)：四舍五入        truncate( 数字, 位数)：截取指定位数</p><p>order by rand()：随机排序</p><h3 id="2-string"><a href="#2-string" class="headerlink" title="2.string"></a>2.string</h3><p>ucase()：小转大        lcase()：大转小        left(‘ ‘,位数)：左截取        right()：右截取        substirng(‘’,起始位置,截取长度)：指定截取</p><p>concat(‘’, ‘’)：将两个字符串合并        可用于查询时设置条件，组合查询：select concat(字段，‘|’，字段) from table</p><h3 id="3-others"><a href="#3-others" class="headerlink" title="3.others"></a>3.others</h3><p>select now()：查看当前时间</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> select year(now()) year, month(now()) month, day(now()) day;+------+-------+------+| year | month | day  |+------+-------+------+| 2022 |     7 |   28 |+------+-------+------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加密函数：</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> select sha('fdsfsd');+------------------------------------------+| sha('fdsfsd')                            |+------------------------------------------+| a3f60445f2031b5cd83534130eeba64cf4a0887b |+------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础总结</title>
      <link href="/2022/08/26/linux/"/>
      <url>/2022/08/26/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="第-1-章-Linux-系统概述"><a href="#第-1-章-Linux-系统概述" class="headerlink" title="第 1 章 Linux 系统概述"></a>第 1 章 Linux 系统概述</h2><h3 id="系统三种接口"><a href="#系统三种接口" class="headerlink" title="系统三种接口"></a>系统三种接口</h3><ul><li>图形用户接口（GUI）：图形界面</li><li>命令行接口：命令行</li><li>程序接口：C语言程序</li></ul><h3 id="Linux-的历史"><a href="#Linux-的历史" class="headerlink" title="Linux 的历史"></a>Linux 的历史</h3><ul><li>GUN（GUN is Not UNIX）——自由软件的软件体系计划</li><li>Linux<ul><li>具有全部 UNIX 特性</li><li>Linus Torvalds 发明</li></ul></li></ul><h3 id="Linux-系统的特点"><a href="#Linux-系统的特点" class="headerlink" title="Linux 系统的特点"></a>Linux 系统的特点</h3><blockquote><p>选择题</p></blockquote><ul><li>与 UNIX 兼容</li><li>自由软件，源码公开</li><li>性能高，安全性强</li><li>便于定制和再开发</li><li>互操作性强</li><li>全面的多任务和真正的 32 位操作系统</li></ul><h3 id="Linux-的用户"><a href="#Linux-的用户" class="headerlink" title="Linux 的用户"></a>Linux 的用户</h3><ul><li><p>软件分类（是否盈利为目的）：</p><ul><li>商业软件（Commercial Software）</li><li>共享软件（Sharware）</li><li>自由软件（Freeware Software）</li></ul></li><li><p>Linux 用户分类（用户性质）：</p><ul><li><p>个人用户</p><blockquote><p>业余用户，如：学生等</p></blockquote></li><li><p>专业用户</p><blockquote><p>如：UNIX的使用者等</p></blockquote></li><li><p>商业用户</p><blockquote><p>向客户提供商业服务，如：IPS、ICP等</p></blockquote></li></ul></li></ul><h3 id="Linux-的常用版本"><a href="#Linux-的常用版本" class="headerlink" title="Linux 的常用版本"></a>Linux 的常用版本</h3><blockquote><p><strong>给版本号进行辨别</strong></p></blockquote><ul><li><p>内核版本：Linux 的内核版本</p><ul><li>形式：主版本号.次版本号.修订次数</li><li>次版本号：<ul><li>奇数：不稳定版本</li><li>偶数：稳定版本</li></ul></li></ul><blockquote><p>Linux 2.4.2</p><p>主版本号：2</p><p>次版本号：4（稳定版本）</p><p>修订次数：2</p></blockquote></li><li><p>发行版本：各个公司发行的版本</p></li></ul><h2 id="第-2-章-常用命令及文件操作"><a href="#第-2-章-常用命令及文件操作" class="headerlink" title="第 2 章 常用命令及文件操作"></a>第 2 章 常用命令及文件操作</h2><h3 id="进入退出命令行"><a href="#进入退出命令行" class="headerlink" title="进入退出命令行"></a>进入退出命令行</h3><ul><li>进入<ul><li>开始 -&gt; 系统终端</li></ul></li><li>退出<ul><li>右上角“关闭”</li><li>shell 提示符输入：<code>exit</code></li><li><code>Ctrl + D</code></li></ul></li></ul><h3 id="提示符"><a href="#提示符" class="headerlink" title="提示符"></a>提示符</h3><ul><li><code>~</code>：默认用户主目录</li><li><code>$</code>：当前用户——普通用户</li><li><code>#</code>：当前用户——超级用户（root）</li></ul><h3 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h3><h4 id="who"><a href="#who" class="headerlink" title="who"></a>who</h4><blockquote><p>系统的用户名    所用终端名    注册到系统的时间</p><p>caijiaquan        console            Dec 10 13:22 </p></blockquote><h4 id="echo（-）"><a href="#echo（-）" class="headerlink" title="echo（*）"></a>echo（*）</h4><blockquote><p>输出到屏幕（如同printf）</p><ul><li><blockquote><p>$ echo hello!</p><p>hello!</p></blockquote></li><li><p><code>-n</code>输出后不换行</p><blockquote><p>$ echo -n hello!</p><p>hello!caijiaquandeMacBook-Air:~ caijiaquan$ </p></blockquote></li></ul></blockquote><h4 id="date（-）"><a href="#date（-）" class="headerlink" title="date（*）"></a>date（*）</h4><blockquote><ul><li><p>显示时间</p><blockquote><p>$ date</p><p>2019年12月12日 星期四 19时38分39秒 CST</p></blockquote></li><li><p>显示现在的日期和时间</p><blockquote><p>$ date ’+Today is %D, and now is %r‘</p><p>Today is 12/12/19, and now is 下午 07 时 59 分 19 秒</p></blockquote><ul><li><code>%D</code>：用 mm/dd/yy 表示</li><li><code>%r</code>：用 hh:mm:ss AM(PM) 表示</li></ul></li><li><p>显示当天时间</p><blockquote><p>$ date -u –date=’2 days ago’</p><p>2019年 12 月 12 日星期四 20：00：11 UTC</p></blockquote><ul><li><code>-u</code>：显示或设定格林时间</li><li><code>--date</code>：显示由字符串指定的时间</li></ul></li><li><p>设置系统时间</p><blockquote><p>$ date –set = ‘15:30:00’</p><p>$ date -s 15:30:00</p></blockquote></li></ul></blockquote><h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4><blockquote><p>显示日历</p><ul><li>$ cal                            显示当月日历</li><li>$ cal [年份]                显示那一年的日历</li><li>$ cal [月份] [年份]    显示那一月的日历            </li></ul></blockquote><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><blockquote><p>清空屏幕</p></blockquote><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><blockquote><p>修改密码</p></blockquote><h4 id="ls（-）"><a href="#ls（-）" class="headerlink" title="ls（*）"></a>ls（*）</h4><blockquote><p>显示当前目录内容</p><ul><li><code>-l</code>：长格式显示详细信息</li><li><code>-a</code>：显示隐藏文件</li></ul></blockquote><h4 id="pwd（-）"><a href="#pwd（-）" class="headerlink" title="pwd（*）"></a>pwd（*）</h4><blockquote><p>显示当前目录路径</p></blockquote><h4 id="su（-）"><a href="#su（-）" class="headerlink" title="su（*）"></a>su（*）</h4><blockquote><p>更改用户身份</p></blockquote><h3 id="文件概念"><a href="#文件概念" class="headerlink" title="文件概念"></a>文件概念</h3><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><ul><li>文件是被命名的相关信息的集合体</li></ul><h4 id="文件的成分"><a href="#文件的成分" class="headerlink" title="文件的成分"></a>文件的成分</h4><ul><li>索引节点：文件权限、文件主、文件大小、存放位置、建立日期等</li><li>数据：文件的实际内容</li></ul><h4 id="文件的通配符"><a href="#文件的通配符" class="headerlink" title="文件的通配符"></a>文件的通配符</h4><blockquote><p>为了处理多个文件（<strong>正则表达式</strong>）</p></blockquote><ul><li><code>*</code><ul><li>与 0 或多个字符相匹配，如：le* -&gt; letter、lease、le……</li><li>.文件（隐藏文件）除外</li></ul></li><li><code>?</code><ul><li>匹配单个字符，如：file? -&gt; file1、file2、file3……</li><li>可以用多个<code>?</code>，如：file?? -&gt; file01、file02……</li></ul></li><li><code>[]</code><ul><li>与单个字符相匹配，范围为<code>[]</code>内的字符，如：file[12] -&gt; file1、file2</li><li><code>-</code>代表范围（升序、可多个范围），如：file[1-9]、file[a-zA-Z]</li><li><code>!</code>或<code>^</code>表示不在范围内</li></ul></li><li>组合用<ul><li><code>[!A-Z]*.?</code>：开头不为大写字母，倒数第二个字符为<code>.</code></li></ul></li></ul><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><ul><li>普通文件</li><li>目录文件</li><li>设备文件</li><li>符号链接文件（类似 Windows 的快捷方式）</li></ul><h3 id="文件显示命令"><a href="#文件显示命令" class="headerlink" title="文件显示命令"></a>文件显示命令</h3><h4 id="cat（-）"><a href="#cat（-）" class="headerlink" title="cat（*）"></a>cat（*）</h4><blockquote><p>连接文件并打印到标准输出设备上</p><ul><li><p>显示 m1 的内容</p><blockquote><p>$ cat m1</p></blockquote></li><li><p>同时显示 m1 和 m2 的内容</p><blockquote><p>$ cat m1 m2</p></blockquote></li><li><p>将m1 和 m2 合并后放入mfile 中</p><blockquote><p>$ cat m1 m2 &gt; mfile</p></blockquote></li><li><p>对m1 的各行编号并输出</p><blockquote><p>$ cat -n m1</p></blockquote></li></ul></blockquote><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><blockquote><p>显示文件内容，每次显示<strong>一屏</strong>，<strong>只能向前浏览</strong></p></blockquote><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><blockquote><p>显示文件内容，每次显示<strong>一屏</strong>，<strong>可以方向键向前向后浏览</strong></p></blockquote><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><blockquote><p>显示指定文件的<strong>开头若干行</strong></p></blockquote><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><blockquote><p>显示指定文件的<strong>尾部</strong></p></blockquote><h3 id="匹配、排序及显示指定内容命令"><a href="#匹配、排序及显示指定内容命令" class="headerlink" title="匹配、排序及显示指定内容命令"></a>匹配、排序及显示指定内容命令</h3><h4 id="grep（-）"><a href="#grep（-）" class="headerlink" title="grep（*）"></a>grep（*）</h4><blockquote><p>查找文件，并输出相应行</p><blockquote><p>grep [选项] [模式] [文件]</p></blockquote><ul><li><p>在密码文件/etc/passwd 中查找包含 mengqc 的所有行</p><blockquote><p>$ grep mengqc /etc/passwd</p></blockquote></li><li><p>在 mengqc及其子目录下所有文件中查找 print</p><blockquote><p>$ grep -r ’print‘ mengqc</p></blockquote><ul><li>-r：<strong>递归</strong>方式查找<strong>所有</strong>子目录中文件</li></ul></li><li><p>在子目录 dir 下与<code>f?.c</code>相匹配的文件中查找包含 main 或 printf 的所有行，不管大小写</p><blockquote><ul><li>$ grep -E ‘[Mm]ain | [Pp]rint’ ~/dir/f?.c</li><li>$ grep -i ‘main | print’ ~/dir/f?.c</li></ul></blockquote><ul><li><code>-E</code>：将<strong>模式（匹配的字符）</strong>解释成正则表达式</li><li><code>-i</code>：不区分大小写</li></ul></li></ul></blockquote><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><blockquote><p>对文本文件的各行进行排序</p></blockquote><h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><blockquote><p>从排序好的文件中去除重复行</p></blockquote><h3 id="复制、删除和移动文件命令"><a href="#复制、删除和移动文件命令" class="headerlink" title="复制、删除和移动文件命令"></a>复制、删除和移动文件命令</h3><h4 id="cp（-）"><a href="#cp（-）" class="headerlink" title="cp（*）"></a>cp（*）</h4><blockquote><p>复制</p><blockquote><p>cp [选项] <strong>源</strong>文件或目录 <strong>目标</strong>文件或目录    <strong>（注意顺序）</strong></p></blockquote><ul><li><code>-r</code>：递归复制，复制指定目录及子目录</li><li><code>-i</code>：交互式复制（问你 Y/N）</li></ul></blockquote><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><blockquote><p>删除</p><blockquote><p>rm [选项] 文件</p></blockquote><ul><li><code>-r</code>：递归删除，删除指定目录及子目录</li><li><code>-i</code>：交互式删除（问你 Y/N）</li></ul></blockquote><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><blockquote><p>重命名 / 移动</p><blockquote><p>mv [选项] <strong>源</strong>文件或目录 <strong>目标</strong>文件或目录    <strong>（注意顺序）</strong></p></blockquote><ul><li><p>将 ex3 改名为 new1</p><blockquote><p>$ mv ex3 new1</p></blockquote></li><li><p>将目录/home/mengqc中所有文件移至当前目录</p><blockquote><p>$ mv /home/mengqc/*</p></blockquote></li></ul></blockquote><h3 id="文件内容统计命令"><a href="#文件内容统计命令" class="headerlink" title="文件内容统计命令"></a>文件内容统计命令</h3><h4 id="wc（-）"><a href="#wc（-）" class="headerlink" title="wc（*）"></a>wc（*）</h4><blockquote><p>统计指定文件的字节数、字数、行数并显示</p><ul><li><p>将<code>cat f1</code>的执行结果给 <code>wc</code>（指定f1的字节数、字数、行数并显示）</p><blockquote><p>$ Cat f1 | wc</p></blockquote><ul><li><code>|</code>：管道符，把前面一个命令的执行结果，作为后面的命令的参数</li></ul></li></ul></blockquote><h2 id="第3章-目录及其操作"><a href="#第3章-目录及其操作" class="headerlink" title="第3章 目录及其操作"></a>第3章 目录及其操作</h2><h3 id="目录概念"><a href="#目录概念" class="headerlink" title="目录概念"></a>目录概念</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ul><li><strong>树型</strong>目录结构（填空）</li></ul><h4 id="重要的目录"><a href="#重要的目录" class="headerlink" title="重要的目录"></a>重要的目录</h4><ul><li><p>bin</p><ul><li>二进制文件的可执行程序（Linxu命令）</li></ul></li><li><p>etc</p><ul><li>包含Linux系统文件</li><li>密码文件：/etc/passwd</li><li>配置文件：/etc/profile</li></ul></li><li><p>mnt</p><ul><li>存放安装文件系统的安装点</li></ul></li><li><p>home</p><ul><li>包含用户主目录（/home/yuebanquan）</li></ul></li></ul><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><ul><li>当前目录：<code>./</code></li><li>当前父目录：<code>../</code></li></ul><h3 id="存取权限"><a href="#存取权限" class="headerlink" title="存取权限"></a>存取权限</h3><ul><li>用户类型<ul><li>owner——文件主</li><li>group——同组用户</li><li>other——可访问系统的其他用户</li><li>root——超级用户</li></ul></li><li>权限<ul><li>r——读</li><li>w——写</li><li>x——可执行或查找</li></ul></li></ul><h3 id="常用目录命令"><a href="#常用目录命令" class="headerlink" title="常用目录命令"></a>常用目录命令</h3><h4 id="mkdir（-）"><a href="#mkdir（-）" class="headerlink" title="mkdir（*）"></a>mkdir（*）</h4><blockquote><p>创建目录</p><ul><li><p>创建目录test，并且u有r，w，x权限，其他无法访问</p><blockquote><ul><li>mkdir –mode=700 /home/yuebanquan/test</li><li>mkdir -m 700 /home/yuebanquan/test</li></ul></blockquote></li><li><p>在当前目录建立bin和其下os_1目录，u有r，w，x，g有w，x，其他用户无权访问</p><blockquote><p>mkdir -p -m 750 bin/os_1</p></blockquote><ul><li>-m， –mode=MODE：设置权限，八进制数</li><li>-p， –parents：创建多个目录（父子一起创建）</li></ul></li></ul></blockquote><h4 id="ln（-）"><a href="#ln（-）" class="headerlink" title="ln（*）"></a>ln（*）</h4><blockquote><p>创建链接（类似Windows的快捷方式）</p><blockquote><p>ln [选项] 源文件 目标文件</p></blockquote><ul><li><p>将/home/yuebanquan/mub1/m2.c 链接到/home/cjq/a2.c （硬链接）</p><blockquote><p># cd /home/yuebanquan</p><p># ln mub1/m2.c /home/cjq/a2.c</p></blockquote></li><li><p>建立符号链接/home/yuebanquan/abc，指向/home/yuebanqauan/mub1（符号链接）</p><blockquote><p>ln -s /home/yuebanqauan/mub1 /home/yuebanquan/abc</p></blockquote></li></ul></blockquote><h4 id="chmod（-）"><a href="#chmod（-）" class="headerlink" title="chmod（*）"></a>chmod（*）</h4><blockquote><p>改变权限</p><blockquote><ul><li><p>符号模式</p><p>chmod [u/g/o/a] [+/-/=] [r/w/x/u/g/o] 文件</p></li><li><p>绝对方式</p><p>chmod [选项] 八进制数 文件</p></li></ul></blockquote><ul><li><p>ex1改为所有用户都有x</p><blockquote><p>chmod a + x ex1</p></blockquote></li><li><p>ex1改为u有w，x，g有x，o无权</p><blockquote><p>chmod u=wx, g=x ex1</p></blockquote></li><li><p>ex1， u和g有rw， o有r</p><blockquote><p>rw- rw- r– =&gt; 110 110 100 =&gt; 664</p><p>chmod 0664 ex1</p></blockquote></li></ul></blockquote><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li><p>硬链接</p><ul><li><p>链接数为0，文件才删除</p></li><li><p>限制</p><ul><li><p>不能对目录文件</p></li><li><p>不能在不同文件系统做（硬链接需要在同一个文件系统)</p><blockquote><p>如：</p><ul><li>FAT</li><li>NTFS</li><li>exFAt</li></ul></blockquote></li></ul></li></ul></li><li><p>符号链接</p><ul><li><p>特点</p><ul><li><p>删除源文件或目录，只删除数据，<strong>不会删除链接</strong>（类似指针），一旦以同样文件名创建源文件，链接继续指向该文件的新数据</p></li><li><p><code>ls -l</code>中作为特殊文件类型显示，第一个字母是<code>l</code></p></li><li><p>大小是连接文件的路径名字节数</p></li><li><p><code>ls -l</code>显示</p><blockquote><p><strong>l</strong>rwxrwxrew （省略） 14（省略）  /etc/motd -&gt; /original_file</p></blockquote><ul><li>14：/original_file有14个字符</li></ul></li></ul></li></ul></li></ul><h3 id="联机帮助命令"><a href="#联机帮助命令" class="headerlink" title="联机帮助命令"></a>联机帮助命令</h3><h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><blockquote><p>显示<strong>联机</strong>帮助手册</p></blockquote><h4 id="help"><a href="#help" class="headerlink" title="help"></a>help</h4><blockquote><p>显示<strong>内置</strong>帮助信息</p></blockquote><h2 id="第4章-进程及其管理"><a href="#第4章-进程及其管理" class="headerlink" title="第4章 进程及其管理"></a>第4章 进程及其管理</h2><h3 id="进程管理相关命令"><a href="#进程管理相关命令" class="headerlink" title="进程管理相关命令"></a>进程管理相关命令</h3><h4 id="ps（-）"><a href="#ps（-）" class="headerlink" title="ps（*）"></a>ps（*）</h4><blockquote><p>监视<strong>活动进程</strong>的状态</p><ul><li><p>列出每个与<strong>当前</strong>shell有关的进程基本信息</p><blockquote><p>ps</p><p>​        PID            TTY                    TIME                            CMD</p><p>进程识别号    对应终端    累计使用CPU时间    执行进程的命令名</p></blockquote></li><li><p>显示<strong>系统</strong>中所有进程(-e)的全面信息(-f)</p><blockquote><p>ps -ef</p></blockquote><ul><li>PPID——父进程ID</li></ul></li><li><p>显示所有<strong>终端</strong>上所有<strong>用户</strong>的有关进程的所有信息</p><blockquote><p>ps aux</p></blockquote><ul><li>STAT——进程运行状态<ul><li>&lt;——高优先级的进程</li><li>N——低优先级的进程</li><li>L——有锁入内存页面</li><li>s——会话组长</li><li>l——多线程</li><li>+——在前台的进程组</li></ul></li></ul></li></ul></blockquote><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><blockquote><p>终止进程</p></blockquote><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h4><blockquote><p>暂停进程</p><ul><li><p>暂停进程100s，查看用户yuebanquan是否在系统中</p><blockquote><p>sleep 100; who | grep ‘yuebanquan’</p></blockquote></li></ul></blockquote><h4 id="nice（-）"><a href="#nice（-）" class="headerlink" title="nice（*）"></a>nice（*）</h4><blockquote><p>降低进程优先级（增加优先数nice）</p><ul><li><p>将T1转为后台程序，并降低优先级</p><blockquote><p>nice -n sh./T1&amp;</p></blockquote><ul><li>-n，adjustment=N：优先值增加N，默认10</li><li>sh./T1&amp;：在后台（&amp;表示）执行任务——调用shell解释并执行T1</li></ul></li></ul></blockquote><h4 id="nuhup"><a href="#nuhup" class="headerlink" title="nuhup"></a>nuhup</h4><blockquote><p>运行挂起、阻塞、注销后继续运行进程</p></blockquote><h4 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h4><blockquote><p>等待指定进程，并返回终止状态</p></blockquote><h3 id="进程优先级"><a href="#进程优先级" class="headerlink" title="进程优先级"></a>进程优先级</h3><ul><li>因素：<ul><li>进程剩余时间配额，用完 -&gt; 0</li><li>进程的优先数nice<ul><li>优先数nice越<strong>小</strong>，优先级越<strong>高</strong></li><li>nice取值：-20 ~ 19</li><li><strong>一般用户</strong>只能设置<strong>正值</strong></li><li><strong>特权用户</strong>才可设置<strong>负值</strong></li></ul></li></ul></li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><blockquote><p>报告文件中<strong>未使用</strong>磁盘空间的情况</p></blockquote><h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><blockquote><p>每个目录<strong>占用</strong>磁盘空间的情况</p></blockquote><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><blockquote><p>压缩&amp;解压</p><p>.gz</p></blockquote><h4 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h4><blockquote><p>解压</p><p>.zip </p></blockquote><h2 id="第5章-文本编辑"><a href="#第5章-文本编辑" class="headerlink" title="第5章 文本编辑"></a>第5章 文本编辑</h2><h3 id="进入-amp-退出Vi"><a href="#进入-amp-退出Vi" class="headerlink" title="进入&amp;退出Vi"></a>进入&amp;退出Vi</h3><ul><li><p>进入</p><p><code>vi [fileName]</code></p></li><li><p>退出</p><ul><li><code>:w [fileName]</code>：保存为 flieName；</li><li><code>w</code>：保存；</li><li><code>:wq</code>：保存并退出；</li><li><code>:q!</code>：不保存强制退出；</li></ul></li></ul><h3 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h3><ul><li><p>命令方式 -&gt; 插入方式：</p><ul><li><code>i</code>：从光标<strong>目前位置</strong>开始输入；</li><li><code>a</code>：从光标<strong>下一位置</strong>开始输入；</li><li><code>o</code>：<strong>光标下面新一行</strong>开始输入；</li><li><code>O</code>:<strong>光标上面新一行</strong>开始输入；</li></ul></li><li><p>插入方式 -&gt; 命令行方式：<code>ESC</code>；</p></li><li><p>命令行方式 -&gt; ex转义方式：<code>:</code>；</p></li></ul><h3 id="文本修改命令"><a href="#文本修改命令" class="headerlink" title="文本修改命令"></a>文本修改命令</h3><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li>删除字符<ul><li><code>x</code>：每按一次，删除光标所在位置的”后面”一个字符；</li><li><code>X</code>：大写的X，每按一次，删除光标所在位置的”前面”一个字符；</li></ul></li><li>删除文本对象<ul><li><code>dd</code>：删除光标所在行；</li><li><code>D</code>：从光标位置删除到尾行</li></ul></li></ul><h4 id="复原"><a href="#复原" class="headerlink" title="复原"></a>复原</h4><ul><li><code>u</code>：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次”u”可以执行多次回复。（类似Ctrl + z）</li><li><code>U</code>：恢复被编辑前的状态</li></ul><h4 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h4><ul><li><code>.</code>：重复实现刚刚的插入或删除命令（类似office中的Alt + Enter）</li></ul><h3 id="字符串检索"><a href="#字符串检索" class="headerlink" title="字符串检索"></a>字符串检索</h3><ul><li>向前检索<ul><li><code>:/关键字</code>：按<code>n</code>找到想要的关键字为止</li></ul></li><li>向后检索<ul><li><code>?/关键字</code>：按<code>n</code>找到想要的关键字为止</li></ul></li></ul><h2 id="第6章-C程序编译工具"><a href="#第6章-C程序编译工具" class="headerlink" title="第6章 C程序编译工具"></a>第6章 C程序编译工具</h2><h3 id="看书-amp-实验报告"><a href="#看书-amp-实验报告" class="headerlink" title="看书&amp;实验报告"></a>看书&amp;实验报告</h3><h2 id="第7章-shell程序设计"><a href="#第7章-shell程序设计" class="headerlink" title="第7章 shell程序设计"></a>第7章 shell程序设计</h2><h3 id="执行shell脚本"><a href="#执行shell脚本" class="headerlink" title="执行shell脚本"></a>执行shell脚本</h3><h4 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h4><blockquote><p>bash 脚本名 [参数]</p></blockquote><h4 id="设置权限为可执行，直接执行"><a href="#设置权限为可执行，直接执行" class="headerlink" title="设置权限为可执行，直接执行"></a>设置权限为可执行，直接执行</h4><blockquote><p>chmod a+x ex2</p><p>./ex2</p></blockquote><h4 id="P121：例7-1"><a href="#P121：例7-1" class="headerlink" title="P121：例7.1"></a>P121：例7.1</h4><h5 id="脚本代码功能"><a href="#脚本代码功能" class="headerlink" title="脚本代码功能"></a>脚本代码功能</h5><p>显示当前目录（pwd），显示今天日期（date）</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul><li><p>创建 exam1</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> exam1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑 exam1</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"My working directory is "</span><span class="token function">pwd</span><span class="token keyword">echo</span> <span class="token string">"Today is "</span><span class="token function">date</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>显示 exam1 代码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> exam1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>赋予可执行权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> a+x exam1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行脚本</p><pre class="line-numbers language-bash"><code class="language-bash">./exam1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p>![7.1](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.1.PNG)</p><h4 id="P121-122：例7-2"><a href="#P121-122：例7-2" class="headerlink" title="P121-122：例7.2"></a>P121-122：例7.2</h4><h5 id="脚本代码功能-1"><a href="#脚本代码功能-1" class="headerlink" title="脚本代码功能"></a>脚本代码功能</h5><p>如果命令行上参数个数为 0，列出当前目录；</p><p>否则，显示其包含的子目录；</p><h5 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h5><ul><li><p>编辑脚本代码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> exam2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># If no arguments, then listing the current directory.</span><span class="token comment" spellcheck="true"># Otherwise, listing each subdirectory.</span><span class="token keyword">if</span> <span class="token function">test</span> $<span class="token comment" spellcheck="true"># = 0</span><span class="token keyword">then</span> <span class="token function">ls</span><span class="token keyword">else</span>    <span class="token keyword">for</span> i    <span class="token keyword">do</span>      <span class="token function">ls</span> -l $ i <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'^d'</span>    <span class="token keyword">done</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看脚本代码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> exam2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>赋予权限并执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> a+x exam2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行脚本</p><pre class="line-numbers language-bash"><code class="language-bash">./exam2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><p>![7.2](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.2.PNG)</p><h3 id="shell-变量和算数运算"><a href="#shell-变量和算数运算" class="headerlink" title="shell 变量和算数运算"></a>shell 变量和算数运算</h3><h4 id="简单赋值"><a href="#简单赋值" class="headerlink" title="简单赋值"></a>简单赋值</h4><blockquote><ul><li><p>变量名=字符串</p><p>myfile=/home/yuebanquan/ff/m1.c</p></li><li><p><code>=</code>两边<strong>没有空格</strong></p></li></ul></blockquote><h4 id="引用变量值"><a href="#引用变量值" class="headerlink" title="引用变量值"></a>引用变量值</h4><blockquote><p>$变量名</p></blockquote><h4 id="P123：例7-3"><a href="#P123：例7-3" class="headerlink" title="P123：例7.3"></a>P123：例7.3</h4><h5 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h5><pre class="line-numbers language-bash"><code class="language-bash">dir<span class="token operator">=</span>/usr/meng/ff<span class="token keyword">echo</span> <span class="token variable">$dir</span><span class="token keyword">echo</span> <span class="token function">dir</span><span class="token keyword">echo</span> <span class="token variable">$Dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">name<span class="token operator">=</span><span class="token string">"yuebanquan 1711216"</span><span class="token keyword">echo</span> <span class="token variable">$name</span>Name<span class="token operator">=</span>yuebanquan 1711216<span class="token keyword">echo</span> <span class="token variable">$Name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">s<span class="token operator">=</span>“ing the file”<span class="token keyword">echo</span> <span class="token function">read</span><span class="token variable">$s</span> and writ<span class="token variable">$s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h5><p>![7.3.1](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.3.1.PNG)</p><blockquote><ul><li><p>引用变量名时：<code>$变量名</code></p></li><li><p>显示变量名时：<code>变量名</code></p></li></ul></blockquote><p>![7.3.2](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.3.2.PNG)</p><blockquote><ul><li><p>如果需要赋的值含：<strong>空格、制表符、换行符</strong>，用<code>""</code></p></li><li><p>变量<strong>区分大小写</strong></p></li><li><p><code>=</code>左右<strong>不能有空格</strong></p></li></ul></blockquote><p>![7.3.3](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.3.3.PNG)</p><blockquote><p>一个变量可以作为长字符串的<strong>一部分</strong></p></blockquote><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h4><blockquote><ul><li>一般形式<ul><li>数组名[index]=数值</li></ul></li><li>显式声明<ul><li>declare -a 数组名</li></ul></li></ul></blockquote><h4 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h4><blockquote><p>${数组名[index]}</p><p>echo ${city[0]}</p></blockquote><h3 id="位置参数（-）"><a href="#位置参数（-）" class="headerlink" title="位置参数（*）"></a>位置参数（*）</h3><h4 id="P125：例-7-4"><a href="#P125：例-7-4" class="headerlink" title="P125：例 7.4"></a>P125：例 7.4</h4><h5 id="脚本代码-1"><a href="#脚本代码-1" class="headerlink" title="脚本代码"></a>脚本代码</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!bin/bash</span><span class="token comment" spellcheck="true"># exam3:shell script to demonstrate the shift commmand</span><span class="token keyword">echo</span> <span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span> <span class="token variable">$3</span> <span class="token variable">$4</span> <span class="token variable">$5</span> <span class="token variable">$6</span> <span class="token variable">$7</span> <span class="token variable">$8</span> <span class="token variable">$9</span><span class="token function">shift</span><span class="token keyword">echo</span> <span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span> <span class="token variable">$3</span> <span class="token variable">$4</span> <span class="token variable">$5</span> <span class="token variable">$6</span> <span class="token variable">$7</span> <span class="token variable">$8</span> <span class="token variable">$9</span><span class="token function">shift</span> 4<span class="token keyword">echo</span> <span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span> <span class="token variable">$3</span> <span class="token variable">$4</span> <span class="token variable">$5</span> <span class="token variable">$6</span> <span class="token variable">$7</span> <span class="token variable">$8</span> <span class="token variable">$9</span><span class="token comment" spellcheck="true"># end                              </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h5><p>![7.4](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.4.PNG)</p><blockquote><p><code>shift</code>如果位置参数不超过 9 个，可将参数向左移动</p></blockquote><h4 id="P126：例7-5"><a href="#P126：例7-5" class="headerlink" title="P126：例7.5"></a>P126：例7.5</h4><h5 id="脚本代码-2"><a href="#脚本代码-2" class="headerlink" title="脚本代码"></a>脚本代码</h5><p>meng1.c</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter an integer,please!\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">squsre</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>meng2.c</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The square = %d\\n"</span><span class="token punctuation">,</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exam4</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># exam4:shell script to combine files and count lines</span><span class="token comment" spellcheck="true"># using command set to set positional parameters</span><span class="token keyword">set</span> meng1.c meng2.c<span class="token function">cat</span> <span class="token variable">$1</span> <span class="token variable">$2</span> <span class="token variable">$3</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token comment" spellcheck="true"># end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h5><p>![7.5](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.5.PNG)</p><blockquote><ul><li><p><code>$1</code>为 meng1.c，<code>$</code>为 meng2.c</p></li><li><p>统计有多少行数</p></li></ul></blockquote><h3 id="预先定义的特殊变量"><a href="#预先定义的特殊变量" class="headerlink" title="预先定义的特殊变量"></a>预先定义的特殊变量</h3><ul><li><p><code>$#</code>：位置参数的个数</p><blockquote><p>例如：</p><p>exam3 A B C D</p><p><code>$#</code>的值为4</p></blockquote></li><li><p><code>$*</code>：位置参数组成的<strong>字符串</strong></p><blockquote><p>例如：</p><p>exam3 A B C D E F G H I J K</p><p><code>$*</code>为A B C D E F G H I J K</p><p><code>"$*"</code>为”$1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 “</p></blockquote></li><li><p><code>$@</code>：位置参数组成的<strong>列表</strong>（注意与<code>$*</code>区分）</p><blockquote><p>例如：</p><p>exam3 A B C D E F G H I J K</p><p><code>$@</code>为”A” “B” “C” “D” “E” “F” “G” “H” “I” ”J“ ”K”</p><p><code>"$@"</code>为”$1” “$2” “$3” “$4” “$5” “$6” “$7” “$8” “$9” “$10” “$11 “</p></blockquote></li><li><p><code>$!</code>：是一个后台命令的PID</p></li><li><p><code>$0</code>：获取当前执行脚本的文件名，包括路径</p></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h4><ul><li><p>shell查找命令的路径列表，用<code>:</code>隔开</p><blockquote><p>PATH = $PATH:$PWD</p></blockquote></li></ul><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><blockquote><p>整数运算</p><p>let arg</p></blockquote><h4 id="P130：例-7-6"><a href="#P130：例-7-6" class="headerlink" title="P130：例 7.6"></a>P130：例 7.6</h4><h5 id="脚本代码-3"><a href="#脚本代码-3" class="headerlink" title="脚本代码"></a>脚本代码</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">"Input 3 integers."</span><span class="token function">read</span> a b c<span class="token keyword">let</span> <span class="token string">"rs=a+b+c"</span><span class="token keyword">let</span> <span class="token string">"rp=(a*b*c)/(a*b+a*c+b*c)"</span><span class="token keyword">echo</span> <span class="token string">"The series value is <span class="token variable">$rs</span>"</span><span class="token keyword">echo</span> <span class="token string">"The parallel value is <span class="token variable">$rp</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h5><p>![7.6](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.6.PNG)</p><blockquote><ul><li>用户输入 3 个电阻值的整数，然后计算并输出它们的串联值和并联值</li></ul></blockquote><h3 id="输出-输入及重定向命令"><a href="#输出-输入及重定向命令" class="headerlink" title="输出/输入及重定向命令"></a>输出/输入及重定向命令</h3><h4 id="read"><a href="#read" class="headerlink" title="read"></a>read</h4><blockquote><p>read：从键盘上读取数据，然后赋给制指定的变量。</p></blockquote><ul><li>如果变量和输入的数据个数相同，<strong>一一对应</strong>赋值</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">read</span> x y ztoday is Monday<span class="token keyword">echo</span> <span class="token variable">$z</span> <span class="token variable">$x</span> <span class="token variable">$y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![7.7.1](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.7.1.PNG)</p><ul><li>如果变量个数小于输入数据个数，从<strong>左到右</strong>赋值，最后<strong>剩余的所有数据</strong>都赋值到<strong>最后一个变量</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">read</span> n1 n2 n3First Second Third 1234 abcd<span class="token keyword">echo</span> <span class="token variable">$n1</span> <span class="token variable">$n2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![7.7.2](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.7.2.PNG)</p><ul><li>如果变量大于输入个数，对应赋值，没有的<strong>取空</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">read</span> n1 n2 n312<span class="token keyword">echo</span> <span class="token variable">$n3</span><span class="token keyword">echo</span> <span class="token variable">$n1</span> <span class="token variable">$n2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>![7.7.3](../../../../课程/大三上/Linux/实验五 Shell编程/截图/7.7.3.PNG)</p><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><ul><li><code>-n</code>：在参数被显示后光标不换行</li></ul><h4 id="lt-——输入重定向符"><a href="#lt-——输入重定向符" class="headerlink" title="<——输入重定向符"></a>&lt;——输入重定向符</h4><blockquote><p>将文件的数据输入命令</p><p>命令&lt;文件名</p></blockquote><h4 id="gt-——-输出重定向符"><a href="#gt-——-输出重定向符" class="headerlink" title=">—— 输出重定向符"></a>&gt;—— 输出重定向符</h4><blockquote><p>将命令的结果输出到文件，会<strong>冲掉</strong>原来文件内容</p><p>命令&gt;文件名</p></blockquote><h4 id="gt-gt-——输出附加定向符"><a href="#gt-gt-——输出附加定向符" class="headerlink" title=">>——输出附加定向符"></a>&gt;&gt;——输出附加定向符</h4><blockquote><p>将命令的结果附加输出到文件<strong>后面</strong>，原数据<strong>不被破坏</strong></p><p>命令&gt;&gt;文件名</p></blockquote><h3 id="特殊字符和命令语法"><a href="#特殊字符和命令语法" class="headerlink" title="特殊字符和命令语法"></a>特殊字符和命令语法</h3><h4 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h4><blockquote><p>单引号内的<strong>所有字符</strong>以<strong>普通字符</strong>出现</p><p>‘   ‘</p></blockquote><h4 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h4><blockquote><p>双引号以内的除<strong>$、`、\、</strong>外，都作为<strong>普通字符</strong>出现</p></blockquote><h4 id="倒引号"><a href="#倒引号" class="headerlink" title="倒引号"></a>倒引号</h4><blockquote><p>命令替换</p><p>变量名=`命令表`</p><blockquote><p>例如：</p><pre class="line-numbers language-shell"><code class="language-shell">users=`who | wc -l`echo The number of users is $users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：The number of users is 3</p></blockquote><p>可嵌套：内层  \`  ` \    （需要转义）</p></blockquote><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><blockquote><p>前一命令输出正好是后一命令的输入</p><p>前一命令 | 后一命令</p></blockquote><h4 id="顺序执行"><a href="#顺序执行" class="headerlink" title="顺序执行"></a>顺序执行</h4><blockquote><p>同一行多条命令，使用<code>;</code>分隔开</p></blockquote><h4 id="复合命令"><a href="#复合命令" class="headerlink" title="复合命令"></a>复合命令</h4><ul><li><code>{ ;}</code>形式<ul><li><code>{</code>后需要一个<strong>空格</strong></li><li><code>}</code>前需要一个<code>;</code></li></ul></li><li><code>()</code>形式</li></ul><h3 id="程序控制结构"><a href="#程序控制结构" class="headerlink" title="程序控制结构"></a>程序控制结构</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><pre class="line-numbers language-shell"><code class="language-shell">if 条件测试then 命令1else 命令2fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h4><ul><li>有关<strong>文件</strong>方面的测试<ul><li><code>-r</code>：若用户<strong>可读</strong>，为true</li><li><code>-w</code>：若用户<strong>可写</strong>，为true</li><li><code>-x</code>：若用户<strong>可执行</strong>，为true</li><li><code>-f</code>：若文件<strong>存在</strong>并是<strong>普通文件</strong>，为true</li><li><code>-d</code>：若文件<strong>存在</strong>并是<strong>目录文件</strong>，为true</li></ul></li><li>有关<strong>字符</strong>方面的测试<ul><li><code>-z s1</code>：若s1的长度为0，true</li><li><code>-n s1</code>：若是s1的长度大于0，true</li><li><code>s1</code>：若s1不是空字符串，true</li><li><code>s1 = s2</code>：等于，true</li><li><code>s1 != s2</code>：不等，true</li><li><code>s1 &lt; s2</code>：按照字典顺序s1在s2之前，true</li><li><code>s1 &gt; s2</code>：按照字典顺序s1在s2之后，true</li></ul></li><li>有关<strong>数值</strong>方面的测试<ul><li><code>n1 -eq n2</code>：等于</li><li><code>n1 -ne n2</code>：不等于</li><li><code>n1 -lt n2</code>：小于</li><li><code>n1 -le n2</code>：小于等于</li><li><code>n1 -gt n2</code>：大于</li><li><code>n1 -ge n2</code>：大于等于</li></ul></li><li>逻辑运算符<ul><li><code>!</code>：逻辑非</li><li><code>-a</code>：逻辑与（And）</li><li><code>-o</code>：逻辑或（OR）</li></ul></li></ul><h4 id="While语句"><a href="#While语句" class="headerlink" title="While语句"></a>While语句</h4><pre class="line-numbers language-shell"><code class="language-shell">while 测试条件do    命令表done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><ul><li><p>值表达方式</p><pre class="line-numbers language-shell"><code class="language-shell">  for 变量 [ in 值表 ]  do      命令表  done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>算数表达式方式（与C语言类似）</p><pre class="line-numbers language-shell"><code class="language-shell">for ((e1;e2;e3))do    命令表done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><blockquote><p>跳出整个循环</p></blockquote><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><blockquote><p>跳出当层循环</p></blockquote><h4 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h4><blockquote><p>退出正在执行的脚本</p></blockquote><h3 id="shell内置命令"><a href="#shell内置命令" class="headerlink" title="shell内置命令"></a>shell内置命令</h3><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><blockquote><p>把相应变量或命令替换</p><p>eval [ arg ]</p><blockquote><p>例如：</p><p>PIPE=“|”</p><p>eval date $PIPE wc -c</p></blockquote></blockquote><h3 id="解决脚本错误"><a href="#解决脚本错误" class="headerlink" title="解决脚本错误"></a>解决脚本错误</h3><ul><li><p>追踪模式下运行</p><pre class="line-numbers language-shell"><code class="language-shell">bash -x exam17<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-x</code>：设置成追踪模式</li></ul></li></ul><h2 id="第8章-安装Linux系统"><a href="#第8章-安装Linux系统" class="headerlink" title="第8章 安装Linux系统"></a>第8章 安装Linux系统</h2><h3 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h3><ul><li>主分区<ul><li>建立主分区安装操作系统（Windows的c盘）</li><li>多个主分区，只有一个可以设置为活动分区</li></ul></li><li>扩展分区</li><li>逻辑分区</li></ul><h3 id="安装Linux需要两个分区"><a href="#安装Linux需要两个分区" class="headerlink" title="安装Linux需要两个分区"></a>安装Linux需要两个分区</h3><ul><li>根文件系统分区（类型：ext3、ext2或reiserfs）</li><li>交换分区（类型：swap）</li></ul><h3 id="登陆和退出系统"><a href="#登陆和退出系统" class="headerlink" title="登陆和退出系统"></a>登陆和退出系统</h3><ul><li>重启<ul><li>reboot</li></ul></li><li>关机<ul><li>poweroff</li><li>halt</li><li>shatdown</li></ul></li></ul><h2 id="第9章-Linux桌面系统及其配置"><a href="#第9章-Linux桌面系统及其配置" class="headerlink" title="第9章 Linux桌面系统及其配置"></a>第9章 Linux桌面系统及其配置</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>弹出主菜单——<code>Alt + F1</code></li><li>关闭当前工作窗口——<code>Alt + F4</code></li></ul><h2 id="第10章-Linux系统管理"><a href="#第10章-Linux系统管理" class="headerlink" title="第10章 Linux系统管理"></a>第10章 Linux系统管理</h2><h3 id="与用户账户相关的文件"><a href="#与用户账户相关的文件" class="headerlink" title="与用户账户相关的文件"></a>与用户账户相关的文件</h3><h4 id="passwd文件"><a href="#passwd文件" class="headerlink" title="passwd文件"></a>passwd文件</h4><ul><li><p>用户关键信息的存放</p></li><li><p><code>/etc/passwd</code></p></li><li><blockquote><p>root : x : 0 : 0 : root : /root : /bin/bash</p><p>注册名：密码：用户标识号：组标识号：用户名：用户主目录：命令解释程序</p></blockquote></li></ul><h4 id="shadow文件"><a href="#shadow文件" class="headerlink" title="shadow文件"></a>shadow文件</h4><ul><li>存放用户加密密码信息和密码的有效信息</li><li><code>/etc/shadow</code></li></ul><h3 id="添加-amp-删除用户"><a href="#添加-amp-删除用户" class="headerlink" title="添加&amp;删除用户"></a>添加&amp;删除用户</h3><h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h4><blockquote><p>添加用户</p><ul><li><p>建立yuebanquan新用户,设置用户密码</p><blockquote><p>useradd yuebanquan</p><p>passwd yuebanquan</p></blockquote></li></ul></blockquote><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><blockquote><p>删除用户</p><p>userdel [-r] 用户名</p><ul><li><p>删除用户yuebanquan</p><blockquote><p>userdel -r yuebanquan</p></blockquote><ul><li><code>-r</code>：把用户主目录的所有内容删除</li></ul></li></ul></blockquote><h3 id="建立文件系统"><a href="#建立文件系统" class="headerlink" title="建立文件系统"></a>建立文件系统</h3><blockquote><p>mkfs [选项] 文件系统名 [硬盘块数量]</p><ul><li><p>在/dev/hda1上建立文件系统，并检查坏块数</p><blockquote><p>mkfs -c /dev/hda1</p></blockquote><ul><li><code>-c</code>：检查坏块数</li></ul></li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
